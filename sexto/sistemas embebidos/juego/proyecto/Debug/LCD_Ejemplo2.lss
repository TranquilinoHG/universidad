
LCD_Ejemplo2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e6  00800100  0000067c  00000710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000067c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  008001e6  008001e6  000007f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000828  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001301  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000961  00000000  00000000  00001c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000742  00000000  00000000  00002572  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051d  00000000  00000000  00002e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009c8  00000000  00000000  0000336d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003d35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3e       	cpi	r26, 0xE6	; 230
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 ee       	ldi	r26, 0xE6	; 230
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3f       	cpi	r26, 0xF8	; 248
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 11 03 	call	0x622	; 0x622 <main>
  9e:	0c 94 3c 03 	jmp	0x678	; 0x678 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCD_pulso_E>:
// RW - debe conectarse a Tierra

// Manda el pulso de habilitación sin alterar otras terminales
void LCD_pulso_E()
{
P_LCD = P_LCD | 0x10;
  a6:	44 9a       	sbi	0x08, 4	; 8
P_LCD = P_LCD & 0xEF;
  a8:	44 98       	cbi	0x08, 4	; 8
  aa:	08 95       	ret

000000ac <LCD_write_inst4>:
}

// Escribe una instrucción de 4 bits, recibida en el nibble inferior
void LCD_write_inst4(uint8_t  inst)
{
P_LCD = inst & 0x0F;        // Rs =  0
  ac:	8f 70       	andi	r24, 0x0F	; 15
  ae:	88 b9       	out	0x08, r24	; 8
LCD_pulso_E();
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_pulso_E>
  b4:	08 95       	ret

000000b6 <LCD_write_inst8>:
}

// Escribe una instrucción de 8 bits
void LCD_write_inst8(uint8_t   inst)
{
  b6:	cf 93       	push	r28
  b8:	c8 2f       	mov	r28, r24
uint8_t   temp;

temp = (inst & 0xF0) >> 4;
LCD_write_inst4(temp);      // Primero el nibble alto
  ba:	82 95       	swap	r24
  bc:	8f 70       	andi	r24, 0x0F	; 15
  be:	0e 94 56 00 	call	0xac	; 0xac <LCD_write_inst4>

temp = inst & 0x0F;
LCD_write_inst4(temp);      // Después el nibble bajo
  c2:	8c 2f       	mov	r24, r28
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	0e 94 56 00 	call	0xac	; 0xac <LCD_write_inst4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8d e0       	ldi	r24, 0x0D	; 13
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_write_inst8+0x16>
  d0:	00 00       	nop

_delay_us(40);
}
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <LCD_write_data>:

// Escribe un dato de 8 bits
void LCD_write_data(uint8_t dat_8b)
{
  d6:	cf 93       	push	r28
  d8:	c8 2f       	mov	r28, r24
uint8_t temp;

temp = (dat_8b & 0xF0) >> 4;	// PARTE ALTA
P_LCD = temp | 0x20; 			// RS = 1
  da:	82 95       	swap	r24
  dc:	8f 70       	andi	r24, 0x0F	; 15
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	88 b9       	out	0x08, r24	; 8
LCD_pulso_E();
  e2:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_pulso_E>

temp = dat_8b & 0x0F; 			// PARTE BAJA
P_LCD = temp | 0x20;  			// RS = 1
  e6:	cf 70       	andi	r28, 0x0F	; 15
  e8:	c0 62       	ori	r28, 0x20	; 32
  ea:	c8 b9       	out	0x08, r28	; 8
LCD_pulso_E();
  ec:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_pulso_E>
  f0:	8d e0       	ldi	r24, 0x0D	; 13
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_write_data+0x1c>
  f6:	00 00       	nop

_delay_us(40);
}
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <LCD_clear>:
}

// Funcion para la limpieza del display
void LCD_clear()
{
LCD_write_inst8(0X01);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_write_inst8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	83 ef       	ldi	r24, 0xF3	; 243
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_clear+0xa>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_clear+0x10>
 10c:	00 00       	nop
 10e:	08 95       	ret

00000110 <LCD_reset>:
 110:	85 ea       	ldi	r24, 0xA5	; 165
 112:	9e e0       	ldi	r25, 0x0E	; 14
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_reset+0x4>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_reset+0xa>
 11a:	00 00       	nop

// Inicializa al LCD
void LCD_reset()
{
_delay_ms(15);              
LCD_write_inst4(0x03);      // Configura la función del Display
 11c:	83 e0       	ldi	r24, 0x03	; 3
 11e:	0e 94 56 00 	call	0xac	; 0xac <LCD_write_inst4>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	94 e0       	ldi	r25, 0x04	; 4
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <LCD_reset+0x16>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <LCD_reset+0x1c>
 12c:	00 00       	nop
                            // La interfaz aún es de 8 bits
_delay_ms(4.1);
LCD_write_inst4(0x03);      // Configura la función del Display
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	0e 94 56 00 	call	0xac	; 0xac <LCD_write_inst4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	91 e2       	ldi	r25, 0x21	; 33
 136:	9a 95       	dec	r25
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_reset+0x26>
 13a:	00 00       	nop
                            // La interfaz aún es de 8 bits
_delay_us(100);
LCD_write_inst4(0x03);      // Configura la función del Display
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	0e 94 56 00 	call	0xac	; 0xac <LCD_write_inst4>
 142:	8d e0       	ldi	r24, 0x0D	; 13
 144:	8a 95       	dec	r24
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_reset+0x34>
 148:	00 00       	nop
_delay_us(40);              // La interfaz aún es de 8 bits

LCD_write_inst4(0x02);      // Configura la función del Display
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 56 00 	call	0xac	; 0xac <LCD_write_inst4>
 150:	9d e0       	ldi	r25, 0x0D	; 13
 152:	9a 95       	dec	r25
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_reset+0x42>
 156:	00 00       	nop
_delay_us(40);              // Define la interfaz de 4 bits

LCD_write_inst8(0X28);      // Configura la función del Display
 158:	88 e2       	ldi	r24, 0x28	; 40
 15a:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_write_inst8>
                            // Dos líneas y 5x7 puntos
LCD_write_inst8(0X0C);      // Encendido del display
 15e:	8c e0       	ldi	r24, 0x0C	; 12
 160:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_write_inst8>

LCD_clear();                // Limpieza del display
 164:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_clear>

LCD_write_inst8(0X06);      //  Ajuste de entrada de datos
 168:	86 e0       	ldi	r24, 0x06	; 6
 16a:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_write_inst8>
 16e:	08 95       	ret

00000170 <LCD_cursor>:

// Ubica al cursor, el nibble alto indica el renglon, el bajo la columna
void LCD_cursor(uint8_t   pos)
{
uint8_t  col;
col = pos & 0X0F;
 170:	98 2f       	mov	r25, r24
 172:	9f 70       	andi	r25, 0x0F	; 15
if((pos & 0XF0) == 0)
 174:	80 7f       	andi	r24, 0xF0	; 240
 176:	29 f4       	brne	.+10     	; 0x182 <LCD_cursor+0x12>
  {
  col = col | 0X80;
  LCD_write_inst8(col);
 178:	89 2f       	mov	r24, r25
 17a:	80 68       	ori	r24, 0x80	; 128
 17c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_write_inst8>
 180:	08 95       	ret
  }
else
   {
   col = col | 0XC0;
   LCD_write_inst8(col);
 182:	89 2f       	mov	r24, r25
 184:	80 6c       	ori	r24, 0xC0	; 192
 186:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_write_inst8>
 18a:	08 95       	ret

0000018c <LCD_write_cad>:
   }
}

// Escribe una cadena, supone un display de 2 renglones y 16 columnas
void LCD_write_cad(char  cad[], uint8_t  tam)
{
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	f8 2e       	mov	r15, r24
 198:	c9 2f       	mov	r28, r25
 19a:	d6 2f       	mov	r29, r22
uint8_t  i;

LCD_clear();
 19c:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_clear>

for(i=0; i<tam; i++)
 1a0:	d1 11       	cpse	r29, r1
 1a2:	0f c0       	rjmp	.+30     	; 0x1c2 <LCD_write_cad+0x36>
 1a4:	17 c0       	rjmp	.+46     	; 0x1d4 <LCD_write_cad+0x48>
   {
   LCD_write_data((uint8_t) cad[i]);
 1a6:	f8 01       	movw	r30, r16
 1a8:	81 91       	ld	r24, Z+
 1aa:	8f 01       	movw	r16, r30
 1ac:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_write_data>
   if(i==15)
 1b0:	cf 30       	cpi	r28, 0x0F	; 15
 1b2:	19 f4       	brne	.+6      	; 0x1ba <LCD_write_cad+0x2e>
   LCD_cursor(0X10);
 1b4:	80 e1       	ldi	r24, 0x10	; 16
 1b6:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_cursor>
{
uint8_t  i;

LCD_clear();

for(i=0; i<tam; i++)
 1ba:	cf 5f       	subi	r28, 0xFF	; 255
 1bc:	dc 13       	cpse	r29, r28
 1be:	f3 cf       	rjmp	.-26     	; 0x1a6 <LCD_write_cad+0x1a>
 1c0:	09 c0       	rjmp	.+18     	; 0x1d4 <LCD_write_cad+0x48>
   {
   LCD_write_data((uint8_t) cad[i]);
 1c2:	0f 2d       	mov	r16, r15
 1c4:	1c 2f       	mov	r17, r28
 1c6:	f8 01       	movw	r30, r16
 1c8:	81 91       	ld	r24, Z+
 1ca:	8f 01       	movw	r16, r30
 1cc:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_write_data>
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
 1d2:	f3 cf       	rjmp	.-26     	; 0x1ba <LCD_write_cad+0x2e>
   if(i==15)
   LCD_cursor(0X10);
   }
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	08 95       	ret

000001e0 <__vector_11>:
uint8_t  nivel  = 1;
uint8_t dos=0;
uint8_t numR = 0;
uint8_t numG = 0;
ISR( TIMER1_COMPA_vect )	//Interrupcion por comparacion
{
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
	
	seg++;
 1ee:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <seg>
 1f2:	8f 5f       	subi	r24, 0xFF	; 255
 1f4:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <seg>
	PORTD = (PORTD==0)?1:0;	
 1f8:	9b b1       	in	r25, 0x0b	; 11
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	91 11       	cpse	r25, r1
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	8b b9       	out	0x0b, r24	; 11
}
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <waitSeg>:
		juego();  //la funcion principal	
	}
}

void waitSeg(uint8_t seg){ // funcion para esperar  segundos
	for(uint8_t i=0;i<seg;i++){
 210:	88 23       	and	r24, r24
 212:	11 f1       	breq	.+68     	; 0x258 <waitSeg+0x48>
 214:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	ef e4       	ldi	r30, 0x4F	; 79
 218:	f3 ec       	ldi	r31, 0xC3	; 195
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <waitSeg+0xa>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <waitSeg+0x10>
 220:	00 00       	nop
 222:	ef e4       	ldi	r30, 0x4F	; 79
 224:	f3 ec       	ldi	r31, 0xC3	; 195
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <waitSeg+0x16>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <waitSeg+0x1c>
 22c:	00 00       	nop
 22e:	ef e4       	ldi	r30, 0x4F	; 79
 230:	f3 ec       	ldi	r31, 0xC3	; 195
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <waitSeg+0x22>
 236:	00 c0       	rjmp	.+0      	; 0x238 <waitSeg+0x28>
 238:	00 00       	nop
 23a:	ef e4       	ldi	r30, 0x4F	; 79
 23c:	f3 ec       	ldi	r31, 0xC3	; 195
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <waitSeg+0x2e>
 242:	00 c0       	rjmp	.+0      	; 0x244 <waitSeg+0x34>
 244:	00 00       	nop
 246:	ef e4       	ldi	r30, 0x4F	; 79
 248:	f3 ec       	ldi	r31, 0xC3	; 195
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <waitSeg+0x3a>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <waitSeg+0x40>
 250:	00 00       	nop
 252:	9f 5f       	subi	r25, 0xFF	; 255
 254:	89 13       	cpse	r24, r25
 256:	df cf       	rjmp	.-66     	; 0x216 <waitSeg+0x6>
 258:	08 95       	ret

0000025a <imprime_num>:
	if(estado == 4){
		LCD_write_cad("presiona '#' para continuar",28);
		estado = 3;
	}
}
void imprime_num(uint8_t num) {
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
	uint16_t  temp=10;		
	uint8_t u=0;				
	while(temp > 9){
		u = num / temp;				//obtenemos el valor mas significativo
 25e:	c8 2f       	mov	r28, r24
 260:	d0 e0       	ldi	r29, 0x00	; 0
		if(num >= temp)				//si es un cero a la izquierda lo ignora
 262:	ca 30       	cpi	r28, 0x0A	; 10
 264:	d1 05       	cpc	r29, r1
 266:	70 f0       	brcs	.+28     	; 0x284 <imprime_num+0x2a>
			LCD_write_data(u+0x30);	 
 268:	9e 01       	movw	r18, r28
 26a:	ad ec       	ldi	r26, 0xCD	; 205
 26c:	bc ec       	ldi	r27, 0xCC	; 204
 26e:	0e 94 2d 03 	call	0x65a	; 0x65a <__umulhisi3>
 272:	96 95       	lsr	r25
 274:	87 95       	ror	r24
 276:	96 95       	lsr	r25
 278:	87 95       	ror	r24
 27a:	96 95       	lsr	r25
 27c:	87 95       	ror	r24
 27e:	80 5d       	subi	r24, 0xD0	; 208
 280:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_write_data>
		num = num % temp;			//quita el valor mas significativo
 284:	9e 01       	movw	r18, r28
 286:	ad ec       	ldi	r26, 0xCD	; 205
 288:	bc ec       	ldi	r27, 0xCC	; 204
 28a:	0e 94 2d 03 	call	0x65a	; 0x65a <__umulhisi3>
 28e:	96 95       	lsr	r25
 290:	87 95       	ror	r24
 292:	96 95       	lsr	r25
 294:	87 95       	ror	r24
 296:	96 95       	lsr	r25
 298:	87 95       	ror	r24
 29a:	9c 01       	movw	r18, r24
 29c:	22 0f       	add	r18, r18
 29e:	33 1f       	adc	r19, r19
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	82 0f       	add	r24, r18
 2ae:	93 1f       	adc	r25, r19
 2b0:	9e 01       	movw	r18, r28
 2b2:	28 1b       	sub	r18, r24
 2b4:	39 0b       	sbc	r19, r25
 2b6:	c9 01       	movw	r24, r18
		temp = temp / 10;
	}
	LCD_write_data((num/temp)+0x30);
 2b8:	80 5d       	subi	r24, 0xD0	; 208
 2ba:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_write_data>
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <teclado>:
//devuelve un valor entero del 0 - 15
uint8_t  teclado() {
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	00 d0       	rcall	.+0      	; 0x2ca <teclado+0x6>
 2ca:	00 d0       	rcall	.+0      	; 0x2cc <teclado+0x8>
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
	uint8_t   sal[4] = { 0xFE, 0xFD, 0xFB, 0xF7 };
 2d0:	8e ef       	ldi	r24, 0xFE	; 254
 2d2:	89 83       	std	Y+1, r24	; 0x01
 2d4:	8d ef       	ldi	r24, 0xFD	; 253
 2d6:	8a 83       	std	Y+2, r24	; 0x02
 2d8:	8b ef       	ldi	r24, 0xFB	; 251
 2da:	8b 83       	std	Y+3, r24	; 0x03
 2dc:	87 ef       	ldi	r24, 0xF7	; 247
 2de:	8c 83       	std	Y+4, r24	; 0x04
 2e0:	fe 01       	movw	r30, r28
 2e2:	31 96       	adiw	r30, 0x01	; 1
	uint8_t   i, ren, ent;
	for( i = 0, ren = 0; i < 4; i++, ren += 3 ) {
 2e4:	80 e0       	ldi	r24, 0x00	; 0
		PORTB = sal[i];
 2e6:	91 91       	ld	r25, Z+
 2e8:	95 b9       	out	0x05, r25	; 5
		asm("nop");
 2ea:	00 00       	nop
		ent = PINB & 0xF0;
 2ec:	93 b1       	in	r25, 0x03	; 3
 2ee:	90 7f       	andi	r25, 0xF0	; 240
		if( ent != 0xF0 ) {  //retorna el valor de la tecla pulsada desde el 0 - 15
 2f0:	90 3f       	cpi	r25, 0xF0	; 240
 2f2:	89 f0       	breq	.+34     	; 0x316 <teclado+0x52>
			switch( ent ) {
 2f4:	90 3b       	cpi	r25, 0xB0	; 176
 2f6:	59 f0       	breq	.+22     	; 0x30e <teclado+0x4a>
 2f8:	18 f4       	brcc	.+6      	; 0x300 <teclado+0x3c>
 2fa:	90 37       	cpi	r25, 0x70	; 112
 2fc:	51 f0       	breq	.+20     	; 0x312 <teclado+0x4e>
 2fe:	0b c0       	rjmp	.+22     	; 0x316 <teclado+0x52>
 300:	90 3d       	cpi	r25, 0xD0	; 208
 302:	19 f0       	breq	.+6      	; 0x30a <teclado+0x46>
 304:	90 3e       	cpi	r25, 0xE0	; 224
 306:	59 f0       	breq	.+22     	; 0x31e <teclado+0x5a>
 308:	06 c0       	rjmp	.+12     	; 0x316 <teclado+0x52>
				case	0xE0:	return  ren;
				case	0xD0:	return  ren + 1;
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	08 c0       	rjmp	.+16     	; 0x31e <teclado+0x5a>
				case	0xB0:	return  ren + 2;
 30e:	8e 5f       	subi	r24, 0xFE	; 254
 310:	06 c0       	rjmp	.+12     	; 0x31e <teclado+0x5a>
				case	0x70:	return  ren + 3;
 312:	8d 5f       	subi	r24, 0xFD	; 253
 314:	04 c0       	rjmp	.+8      	; 0x31e <teclado+0x5a>
}
//devuelve un valor entero del 0 - 15
uint8_t  teclado() {
	uint8_t   sal[4] = { 0xFE, 0xFD, 0xFB, 0xF7 };
	uint8_t   i, ren, ent;
	for( i = 0, ren = 0; i < 4; i++, ren += 3 ) {
 316:	8d 5f       	subi	r24, 0xFD	; 253
 318:	8c 30       	cpi	r24, 0x0C	; 12
 31a:	29 f7       	brne	.-54     	; 0x2e6 <teclado+0x22>
				case	0xB0:	return  ren + 2;
				case	0x70:	return  ren + 3;
			}
		}
	}
	return   0xFF;
 31c:	8f ef       	ldi	r24, 0xFF	; 255
}
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <LCD_write_num>:
void LCD_write_num(uint8_t cad[], uint8_t  tam)
{
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	7c 01       	movw	r14, r24
 33a:	16 2f       	mov	r17, r22
	uint8_t  i;
	LCD_clear();
 33c:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_clear>
	for(i=0; i<tam; i++)
 340:	11 23       	and	r17, r17
 342:	71 f0       	breq	.+28     	; 0x360 <LCD_write_num+0x34>
 344:	e7 01       	movw	r28, r14
 346:	11 50       	subi	r17, 0x01	; 1
 348:	01 2f       	mov	r16, r17
 34a:	10 e0       	ldi	r17, 0x00	; 0
 34c:	0f 5f       	subi	r16, 0xFF	; 255
 34e:	1f 4f       	sbci	r17, 0xFF	; 255
 350:	0e 0d       	add	r16, r14
 352:	1f 1d       	adc	r17, r15
	{
		imprime_num(cad[i]);
 354:	89 91       	ld	r24, Y+
 356:	0e 94 2d 01 	call	0x25a	; 0x25a <imprime_num>
}
void LCD_write_num(uint8_t cad[], uint8_t  tam)
{
	uint8_t  i;
	LCD_clear();
	for(i=0; i<tam; i++)
 35a:	c0 17       	cp	r28, r16
 35c:	d1 07       	cpc	r29, r17
 35e:	d1 f7       	brne	.-12     	; 0x354 <LCD_write_num+0x28>
	{
		imprime_num(cad[i]);
	}
}
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	ff 90       	pop	r15
 36a:	ef 90       	pop	r14
 36c:	08 95       	ret

0000036e <juego>:
		_delay_ms(200);
		_delay_ms(200);
		_delay_ms(200);
	}
}
void juego(){
 36e:	cf 93       	push	r28
	//
	if(estado== 0){
 370:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <estado>
 374:	81 11       	cpse	r24, r1
 376:	0c c0       	rjmp	.+24     	; 0x390 <juego+0x22>
		LCD_write_cad("BIENVENIDO",10);
 378:	6a e0       	ldi	r22, 0x0A	; 10
 37a:	8d e0       	ldi	r24, 0x0D	; 13
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_cad>
		waitSeg(2);
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	0e 94 08 01 	call	0x210	; 0x210 <waitSeg>
		estado = 4;
 388:	84 e0       	ldi	r24, 0x04	; 4
 38a:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <estado>
 38e:	1c c1       	rjmp	.+568    	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
		
	}
	if(estado == 1){
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	99 f5       	brne	.+102    	; 0x3fa <juego+0x8c>
		
		TCCR1B=0X00;			//reinicia el contador
 394:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		seg=0;
 398:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <seg>
		if(nivel ==2)
 39c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3a0:	82 30       	cpi	r24, 0x02	; 2
 3a2:	19 f4       	brne	.+6      	; 0x3aa <juego+0x3c>
			OCR0A  = 99;
 3a4:	83 e6       	ldi	r24, 0x63	; 99
 3a6:	87 bd       	out	0x27, r24	; 39
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <juego+0x40>
		else
			OCR0A  = 9;	
 3aa:	89 e0       	ldi	r24, 0x09	; 9
 3ac:	87 bd       	out	0x27, r24	; 39
		uint8_t numA  = TCNT0;   //leer el numero aleatorio
 3ae:	c6 b5       	in	r28, 0x26	; 38
		numero[puntos]= numA;	 //agregar al vector el valor
 3b0:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <puntos>
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	e4 51       	subi	r30, 0x14	; 20
 3b8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ba:	c0 83       	st	Z, r28
		estado = 2;
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <estado>
		LCD_write_cad("recuerda el:",12);
 3c2:	6c e0       	ldi	r22, 0x0C	; 12
 3c4:	88 e1       	ldi	r24, 0x18	; 24
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_cad>
		imprime_num(numA);
 3cc:	8c 2f       	mov	r24, r28
 3ce:	0e 94 2d 01 	call	0x25a	; 0x25a <imprime_num>
		waitSeg(1);
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 08 01 	call	0x210	; 0x210 <waitSeg>
		LCD_write_cad("secuencia:       ",16);
 3d8:	60 e1       	ldi	r22, 0x10	; 16
 3da:	85 e2       	ldi	r24, 0x25	; 37
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_cad>
		numsRs = 0;
 3e2:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <numsRs>
		TCCR1B = 0x0B;			//iniciar el contador 1
 3e6:	8b e0       	ldi	r24, 0x0B	; 11
 3e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		dos =0;
 3ec:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <dos>
		numG = numG + 1;
 3f0:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <__data_end>
 3f4:	8f 5f       	subi	r24, 0xFF	; 255
 3f6:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__data_end>
	}
	if(estado == 2){
 3fa:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <estado>
 3fe:	82 30       	cpi	r24, 0x02	; 2
 400:	09 f0       	breq	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 402:	e2 c0       	rjmp	.+452    	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
		if(seg <= 2*(numG)){	// siempre y cuando no se acabe el tiempo
 404:	20 91 f7 01 	lds	r18, 0x01F7	; 0x8001f7 <seg>
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <__data_end>
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	82 17       	cp	r24, r18
 416:	93 07       	cpc	r25, r19
 418:	0c f4       	brge	.+2      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41a:	c1 c0       	rjmp	.+386    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
								// por cada numero que se tiene que ingresar se espera dos segundos
			if(puntos == 3){
 41c:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <puntos>
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	71 f5       	brne	.+92     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
				puntos = 0;
 424:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <puntos>
				LCD_write_cad("GANASTE",7);
 428:	67 e0       	ldi	r22, 0x07	; 7
 42a:	87 e3       	ldi	r24, 0x37	; 55
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_cad>
				waitSeg(2);
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	0e 94 08 01 	call	0x210	; 0x210 <waitSeg>
				if(nivel == 2){
 438:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 43c:	82 30       	cpi	r24, 0x02	; 2
 43e:	61 f4       	brne	.+24     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
					LCD_write_cad("pulsa # para    empezar nvl 1",29);
 440:	6d e1       	ldi	r22, 0x1D	; 29
 442:	8f e3       	ldi	r24, 0x3F	; 63
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_cad>
					nivel  = 1;
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					estado = 3;
 450:	83 e0       	ldi	r24, 0x03	; 3
 452:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <estado>
 456:	0b c0       	rjmp	.+22     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
				
				}
				else{
					LCD_write_cad("pulsa # para    empezar nvl 2",29);
 458:	6d e1       	ldi	r22, 0x1D	; 29
 45a:	8d e5       	ldi	r24, 0x5D	; 93
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_cad>
					nivel  = 2;
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					estado = 3;
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <estado>
				
				}
				puntos = 0;
 46e:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <puntos>
				seg    = 0;
 472:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <seg>
				numG = 0;
 476:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <__data_end>
				TCCR1B = 0x00;
 47a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 47e:	a4 c0       	rjmp	.+328    	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
			}
			else{
				carct = teclado();
 480:	0e 94 62 01 	call	0x2c4	; 0x2c4 <teclado>
 484:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <carct>
				
				if(carct != 0xFF){
 488:	8f 3f       	cpi	r24, 0xFF	; 255
 48a:	09 f4       	brne	.+2      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 48c:	9d c0       	rjmp	.+314    	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
					LCD_write_data(valores[carct]+0x30);
 48e:	e8 2f       	mov	r30, r24
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	ef 5f       	subi	r30, 0xFF	; 255
 494:	fe 4f       	sbci	r31, 0xFE	; 254
 496:	80 81       	ld	r24, Z
 498:	80 5d       	subi	r24, 0xD0	; 208
 49a:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_write_data>
 49e:	8f e4       	ldi	r24, 0x4F	; 79
 4a0:	93 ec       	ldi	r25, 0xC3	; 195
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4a8:	00 00       	nop
 4aa:	87 ea       	ldi	r24, 0xA7	; 167
 4ac:	91 e6       	ldi	r25, 0x61	; 97
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b4:	00 00       	nop
					_delay_ms(200);
					_delay_ms(100);
					if(numero[numsRs]>9 && dos<2){
 4b6:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <numsRs>
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	e4 51       	subi	r30, 0x14	; 20
 4be:	fe 4f       	sbci	r31, 0xFE	; 254
 4c0:	80 81       	ld	r24, Z
 4c2:	8a 30       	cpi	r24, 0x0A	; 10
 4c4:	18 f1       	brcs	.+70     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4c6:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <dos>
 4ca:	82 30       	cpi	r24, 0x02	; 2
 4cc:	f8 f4       	brcc	.+62     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
						//lee dos caracteres
						if(dos==0)
 4ce:	81 11       	cpse	r24, r1
 4d0:	11 c0       	rjmp	.+34     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
						{
							numR = valores[carct]*10;
 4d2:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <carct>
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	ef 5f       	subi	r30, 0xFF	; 255
 4da:	fe 4f       	sbci	r31, 0xFE	; 254
 4dc:	80 81       	ld	r24, Z
 4de:	88 0f       	add	r24, r24
 4e0:	98 2f       	mov	r25, r24
 4e2:	99 0f       	add	r25, r25
 4e4:	99 0f       	add	r25, r25
 4e6:	89 0f       	add	r24, r25
 4e8:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <numR>
							dos=1;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <dos>
 4f2:	6a c0       	rjmp	.+212    	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
						}
						else 
						{
							numR = numR + valores[carct];
 4f4:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <carct>
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	ef 5f       	subi	r30, 0xFF	; 255
 4fc:	fe 4f       	sbci	r31, 0xFE	; 254
 4fe:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <numR>
 502:	80 81       	ld	r24, Z
 504:	89 0f       	add	r24, r25
 506:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <numR>
 50a:	79 c0       	rjmp	.+242    	; 0x5fe <__EEPROM_REGION_LENGTH__+0x1fe>
						
					}
					else
						{
							dos = 2;
							numR = valores[carct];
 50c:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <carct>
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	ef 5f       	subi	r30, 0xFF	; 255
 514:	fe 4f       	sbci	r31, 0xFE	; 254
 516:	80 81       	ld	r24, Z
 518:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <numR>
 51c:	70 c0       	rjmp	.+224    	; 0x5fe <__EEPROM_REGION_LENGTH__+0x1fe>
						}
					if(dos == 2){	
						TCCR1B = 0x00;	//Desactivar el temporizador
						dos= 0;
						if(numero[numsRs]==numR){
							if(numsRs == puntos){
 51e:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <puntos>
 522:	89 13       	cpse	r24, r25
 524:	12 c0       	rjmp	.+36     	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
								LCD_write_cad("correcto",8);
 526:	68 e0       	ldi	r22, 0x08	; 8
 528:	8b e7       	ldi	r24, 0x7B	; 123
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_cad>
								waitSeg(2);
 530:	82 e0       	ldi	r24, 0x02	; 2
 532:	0e 94 08 01 	call	0x210	; 0x210 <waitSeg>
								puntos = puntos + 1;
 536:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <puntos>
 53a:	8f 5f       	subi	r24, 0xFF	; 255
 53c:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <puntos>
								seg = 0;
 540:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <seg>
								estado = 1;
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <estado>
							}
							numsRs = numsRs+1;
 54a:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <numsRs>
 54e:	8f 5f       	subi	r24, 0xFF	; 255
 550:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <numsRs>
 554:	39 c0       	rjmp	.+114    	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
						}
						else{
							LCD_write_cad("Secuencia mal",13);
 556:	6d e0       	ldi	r22, 0x0D	; 13
 558:	84 e8       	ldi	r24, 0x84	; 132
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_cad>
							waitSeg(2);
 560:	82 e0       	ldi	r24, 0x02	; 2
 562:	0e 94 08 01 	call	0x210	; 0x210 <waitSeg>
							LCD_write_cad("la secuencia    correcta es...",30);
 566:	6e e1       	ldi	r22, 0x1E	; 30
 568:	82 e9       	ldi	r24, 0x92	; 146
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_cad>
							waitSeg(2);
 570:	82 e0       	ldi	r24, 0x02	; 2
 572:	0e 94 08 01 	call	0x210	; 0x210 <waitSeg>
							LCD_write_num(numero,numG);
 576:	60 91 e6 01 	lds	r22, 0x01E6	; 0x8001e6 <__data_end>
 57a:	8c ee       	ldi	r24, 0xEC	; 236
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_write_num>
							waitSeg(1);
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	0e 94 08 01 	call	0x210	; 0x210 <waitSeg>
							estado = 4;
 588:	84 e0       	ldi	r24, 0x04	; 4
 58a:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <estado>
							puntos = 0;
 58e:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <puntos>
							numG = 0;
 592:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <__data_end>
							nivel = 1;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 59c:	27 c0       	rjmp	.+78     	; 0x5ec <__EEPROM_REGION_LENGTH__+0x1ec>
					}
				}
			}
		}
		else{
			TCCR1B = 0x00;	//Desactivar el temporizador
 59e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
			LCD_write_cad("limite de tiempo agotado",24);
 5a2:	68 e1       	ldi	r22, 0x18	; 24
 5a4:	81 eb       	ldi	r24, 0xB1	; 177
 5a6:	91 e0       	ldi	r25, 0x01	; 1
 5a8:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_cad>
			waitSeg(2);
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	0e 94 08 01 	call	0x210	; 0x210 <waitSeg>
			estado = 4;
 5b2:	84 e0       	ldi	r24, 0x04	; 4
 5b4:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <estado>
			numG = 0;
 5b8:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <__data_end>
			nivel = 1;
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			puntos = 0;
 5c2:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <puntos>
 5c6:	12 c0       	rjmp	.+36     	; 0x5ec <__EEPROM_REGION_LENGTH__+0x1ec>
		}
	}
	if(estado == 3){
 5c8:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <estado>
 5cc:	83 30       	cpi	r24, 0x03	; 3
 5ce:	51 f4       	brne	.+20     	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
		carct = teclado();
 5d0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <teclado>
 5d4:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <carct>
		if(carct == 11){
 5d8:	8b 30       	cpi	r24, 0x0B	; 11
 5da:	21 f4       	brne	.+8      	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
			estado = 1;
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <estado>
 5e2:	1d c0       	rjmp	.+58     	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
		}
	}
	if(estado == 4){
 5e4:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <estado>
 5e8:	84 30       	cpi	r24, 0x04	; 4
 5ea:	c9 f4       	brne	.+50     	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
		LCD_write_cad("presiona '#' para continuar",28);
 5ec:	6c e1       	ldi	r22, 0x1C	; 28
 5ee:	8a ec       	ldi	r24, 0xCA	; 202
 5f0:	91 e0       	ldi	r25, 0x01	; 1
 5f2:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_cad>
		estado = 3;
 5f6:	83 e0       	ldi	r24, 0x03	; 3
 5f8:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <estado>
	}
}
 5fc:	10 c0       	rjmp	.+32     	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
						{
							dos = 2;
							numR = valores[carct];
						}
					if(dos == 2){	
						TCCR1B = 0x00;	//Desactivar el temporizador
 5fe:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
						dos= 0;
 602:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <dos>
						if(numero[numsRs]==numR){
 606:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <numsRs>
 60a:	e8 2f       	mov	r30, r24
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	e4 51       	subi	r30, 0x14	; 20
 610:	fe 4f       	sbci	r31, 0xFE	; 254
 612:	20 81       	ld	r18, Z
 614:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <numR>
 618:	29 13       	cpse	r18, r25
 61a:	9d cf       	rjmp	.-198    	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
 61c:	80 cf       	rjmp	.-256    	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
	}
	if(estado == 4){
		LCD_write_cad("presiona '#' para continuar",28);
		estado = 3;
	}
}
 61e:	cf 91       	pop	r28
 620:	08 95       	ret

00000622 <main>:
	
	seg++;
	PORTD = (PORTD==0)?1:0;	
}
int main(void)
{	DDRD = 0xFF;
 622:	8f ef       	ldi	r24, 0xFF	; 255
 624:	8a b9       	out	0x0a, r24	; 10
	//dates para el teclado
	DDRB = 0x0F;			// Puerto B como entrada/salida 
 626:	9f e0       	ldi	r25, 0x0F	; 15
 628:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xF0;			// Pull - Up en las entradas
 62a:	90 ef       	ldi	r25, 0xF0	; 240
 62c:	95 b9       	out	0x05, r25	; 5
	//fin datos para el teclado
	DDRC = 0xFF;	// Salida para el LCD
 62e:	87 b9       	out	0x07, r24	; 7
	LCD_reset();	// Inicializa al LCD
 630:	0e 94 88 00 	call	0x110	; 0x110 <LCD_reset>
	//configuracion del temporizador 0 con CTC
	OCR0A = 9;
 634:	89 e0       	ldi	r24, 0x09	; 9
 636:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0x02;
 638:	82 e0       	ldi	r24, 0x02	; 2
 63a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;
 63c:	93 e0       	ldi	r25, 0x03	; 3
 63e:	95 bd       	out	0x25, r25	; 37
	//configuracion del temporizador 1 con CTC
	OCR1A = 15624;
 640:	28 e0       	ldi	r18, 0x08	; 8
 642:	3d e3       	ldi	r19, 0x3D	; 61
 644:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 648:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIFR1  = 0x02;
 64c:	86 bb       	out	0x16, r24	; 22
	TIMSK1 = 0x02;	
 64e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	sei();
 652:	78 94       	sei
	while (1)
	{
		juego();  //la funcion principal	
 654:	0e 94 b7 01 	call	0x36e	; 0x36e <juego>
 658:	fd cf       	rjmp	.-6      	; 0x654 <main+0x32>

0000065a <__umulhisi3>:
 65a:	a2 9f       	mul	r26, r18
 65c:	b0 01       	movw	r22, r0
 65e:	b3 9f       	mul	r27, r19
 660:	c0 01       	movw	r24, r0
 662:	a3 9f       	mul	r26, r19
 664:	70 0d       	add	r23, r0
 666:	81 1d       	adc	r24, r1
 668:	11 24       	eor	r1, r1
 66a:	91 1d       	adc	r25, r1
 66c:	b2 9f       	mul	r27, r18
 66e:	70 0d       	add	r23, r0
 670:	81 1d       	adc	r24, r1
 672:	11 24       	eor	r1, r1
 674:	91 1d       	adc	r25, r1
 676:	08 95       	ret

00000678 <_exit>:
 678:	f8 94       	cli

0000067a <__stop_program>:
 67a:	ff cf       	rjmp	.-2      	; 0x67a <__stop_program>
